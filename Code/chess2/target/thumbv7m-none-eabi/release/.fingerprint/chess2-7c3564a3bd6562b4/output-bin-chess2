{"message":"labeled expression must be followed by `:`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":10408,"byte_end":10413,"line_start":229,"line_end":229,"column_start":9,"column_end":14,"is_primary":false,"text":[{"text":"        'game loop {","highlight_start":9,"highlight_end":14}],"label":"the label","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":10408,"byte_end":22590,"line_start":229,"line_end":477,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        'game loop {","highlight_start":9,"highlight_end":21},{"text":"            lcd.clear(&mut delay);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let players_turn = player_white == board.whites_move; // Determine wether the current turn is for the player or computer to make","highlight_start":1,"highlight_end":141},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Piece move for the chess engine and the physical board must be stored seperately","highlight_start":1,"highlight_end":96},{"text":"            // Because the physical board has a dynamic orientation for the teams, while the internal engine board representation has a static orientation for the white and black team perspective","highlight_start":1,"highlight_end":196},{"text":"            let mut piece_internal_move = algorithm::Move::new();","highlight_start":1,"highlight_end":66},{"text":"            let mut piece_physical_move = algorithm::Move::new();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            physical_bitboard = embedded::read_board_halls(&mut grid_sr, &hall_sensor, &mut delay); // Get bitboard of pieces on the physical board before a piece has been moved","highlight_start":1,"highlight_end":178},{"text":"            let mut physical_bitboard_pm: u64 = 0; // Bitboard of pieces on the physical board after a piece has been moved","highlight_start":1,"highlight_end":124},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Get move from player / computer","highlight_start":1,"highlight_end":47},{"text":"            if players_turn {","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut init_physical_bitboard = physical_bitboard;","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Loop until the player has made a proper move","highlight_start":1,"highlight_end":64},{"text":"                let mut piece_removed = false;","highlight_start":1,"highlight_end":47},{"text":"                loop {","highlight_start":1,"highlight_end":23},{"text":"                    lcd.set_cursor(&mut delay, [0, 0]);","highlight_start":1,"highlight_end":56},{"text":"                    lcd.print(&mut delay, \"Players turn\");","highlight_start":1,"highlight_end":59},{"text":"                    lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":56},{"text":"                    lcd_print_team(&mut lcd, &mut delay, player_white);","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let new_physical_bitboard = embedded::read_board_halls(&mut grid_sr, &hall_sensor, &mut delay); // Get bitboard of pieces on the physical board","highlight_start":1,"highlight_end":164},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let piece_change = chess2::find_piece_change(physical_bitboard, new_physical_bitboard);","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Keep track of pieces being removed from the board so pieces can be captured without throwing an error","highlight_start":1,"highlight_end":125},{"text":"                    if piece_change == -1 {","highlight_start":1,"highlight_end":44},{"text":"                        if !piece_removed {","highlight_start":1,"highlight_end":44},{"text":"                            init_physical_bitboard = new_physical_bitboard;","highlight_start":1,"highlight_end":76},{"text":"                            piece_removed = true;","highlight_start":1,"highlight_end":50},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else if piece_change > -1 {","highlight_start":1,"highlight_end":50},{"text":"                        init_physical_bitboard = physical_bitboard;","highlight_start":1,"highlight_end":68},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let button_pressed = button.press(&mut cycle_counter);","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // When the button is pressed 5 times consecutively open a menu to change the maximum time that the computer takes to search","highlight_start":1,"highlight_end":145},{"text":"                    if button.consecutive_presses == 5 {","highlight_start":1,"highlight_end":57},{"text":"                        loop {","highlight_start":1,"highlight_end":31},{"text":"                            lcd.clear(&mut delay);","highlight_start":1,"highlight_end":51},{"text":"                            lcd.set_cursor(&mut delay, [0, 0]);","highlight_start":1,"highlight_end":64},{"text":"                            lcd.print(&mut delay, \"Engine search ms\");","highlight_start":1,"highlight_end":71},{"text":"                            lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":64},{"text":"                            lcd.print(&mut delay, \"Please revert\");","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // When the button is pressed greater than 9 times consecutevily resign","highlight_start":1,"highlight_end":92},{"text":"                    if button.consecutive_presses > 9 {","highlight_start":1,"highlight_end":56},{"text":"                        break 'game;","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    if button_pressed {","highlight_start":1,"highlight_end":40},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        let player_move = chess2::find_bitboard_move(init_physical_bitboard, new_physical_bitboard, &board);","highlight_start":1,"highlight_end":125},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        match player_move {","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // If the move was ok break the loop","highlight_start":1,"highlight_end":65},{"text":"                            Ok(player_move) => {","highlight_start":1,"highlight_end":49},{"text":"                                piece_physical_move = player_move;","highlight_start":1,"highlight_end":67},{"text":"                                physical_bitboard_pm = new_physical_bitboard;","highlight_start":1,"highlight_end":78},{"text":"                                break;","highlight_start":1,"highlight_end":39},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // If there was an error with the move make the player revert the move so they can try again","highlight_start":1,"highlight_end":121},{"text":"                            Err(_) => {","highlight_start":1,"highlight_end":40},{"text":"                                lcd.clear(&mut delay);","highlight_start":1,"highlight_end":55},{"text":"                                lcd.set_cursor(&mut delay, [0, 0]);","highlight_start":1,"highlight_end":68},{"text":"                                lcd.print(&mut delay, \"Invalid move\");","highlight_start":1,"highlight_end":71},{"text":"                                lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":68},{"text":"                                lcd.print(&mut delay, \"Please revert\");","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                show_bitboard_move(init_physical_bitboard, &mut grid_sr, &hall_sensor, &mut button, &mut cycle_counter, &mut delay);","highlight_start":1,"highlight_end":149},{"text":"                                lcd.clear(&mut delay);","highlight_start":1,"highlight_end":55},{"text":"                                piece_removed = false;","highlight_start":1,"highlight_end":55},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                        }                        ","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                lcd.set_cursor(&mut delay, [0, 0]);","highlight_start":1,"highlight_end":52},{"text":"                lcd.print(&mut delay, \"Computers turn\");","highlight_start":1,"highlight_end":57},{"text":"                lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":52},{"text":"                lcd_print_team(&mut lcd, &mut delay, !player_white);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                cycle_counter.update();","highlight_start":1,"highlight_end":40},{"text":"                let start_cycles = cycle_counter.cycles;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Generate a move which takes no longer than max_search_ms and has a maximum search depth of max_search_depth","highlight_start":1,"highlight_end":127},{"text":"                piece_internal_move = algorithm::gen_best_move(","highlight_start":1,"highlight_end":64},{"text":"                    true,","highlight_start":1,"highlight_end":26},{"text":"                    &mut cycle_counter,","highlight_start":1,"highlight_end":40},{"text":"                    &start_cycles,","highlight_start":1,"highlight_end":35},{"text":"                    &chess2::embedded::ms_to_cycles(max_search_ms, clock_mhz as u64),","highlight_start":1,"highlight_end":86},{"text":"                    max_search_depth,","highlight_start":1,"highlight_end":38},{"text":"                    0,","highlight_start":1,"highlight_end":23},{"text":"                    0,","highlight_start":1,"highlight_end":23},{"text":"                    algorithm::AlphaBeta::new(),","highlight_start":1,"highlight_end":49},{"text":"                    &opening_heatmap,","highlight_start":1,"highlight_end":38},{"text":"                    board,","highlight_start":1,"highlight_end":27},{"text":"                    &pieces_info,","highlight_start":1,"highlight_end":34},{"text":"                ).piece_move.unwrap();","highlight_start":1,"highlight_end":39},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Set piece_internal / piece_physical move (whichever hasn't been updated yet)","highlight_start":1,"highlight_end":92},{"text":"            if player_white {","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // When the player is white the physical and internal boards are the same orientation so nothing needs to be flipped","highlight_start":1,"highlight_end":133},{"text":"                if players_turn {","highlight_start":1,"highlight_end":34},{"text":"                    piece_internal_move = piece_physical_move;","highlight_start":1,"highlight_end":63},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    piece_physical_move = piece_internal_move;","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // When the player is black the physical and internal boards are opposite orientations so the moves have to flipped","highlight_start":1,"highlight_end":132},{"text":"                if players_turn {","highlight_start":1,"highlight_end":34},{"text":"                    piece_internal_move = piece_physical_move.flip();","highlight_start":1,"highlight_end":70},{"text":"                    piece_internal_move.initial_piece_coordinates.board_index = chess2::find_board_index(&board, piece_internal_move.initial_piece_coordinates.bit).unwrap(); // Update board index","highlight_start":1,"highlight_end":196},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    piece_physical_move = piece_internal_move.flip();","highlight_start":1,"highlight_end":70},{"text":"                } ","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Get friendly and enemy kings","highlight_start":1,"highlight_end":44},{"text":"            let friendly_king_index;","highlight_start":1,"highlight_end":37},{"text":"            let enemy_king_index;","highlight_start":1,"highlight_end":34},{"text":"            if board.whites_move {","highlight_start":1,"highlight_end":35},{"text":"                friendly_king_index = 5;","highlight_start":1,"highlight_end":41},{"text":"                enemy_king_index = 11;","highlight_start":1,"highlight_end":39},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                friendly_king_index = 11;","highlight_start":1,"highlight_end":42},{"text":"                enemy_king_index = 5;","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let friendly_king = board_representation::BoardCoordinates {","highlight_start":1,"highlight_end":73},{"text":"                board_index: friendly_king_index,","highlight_start":1,"highlight_end":50},{"text":"                bit: chess2::find_bit_on(board.board[friendly_king_index], 0),","highlight_start":1,"highlight_end":79},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let enemy_king = board_representation::BoardCoordinates {","highlight_start":1,"highlight_end":70},{"text":"                board_index: enemy_king_index,","highlight_start":1,"highlight_end":47},{"text":"                bit: chess2::find_bit_on(board.board[enemy_king_index], 0),","highlight_start":1,"highlight_end":76},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            use chess2::board::move_generator;","highlight_start":1,"highlight_end":47},{"text":"            use move_generator::TurnError;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Get new board after turn has been made","highlight_start":1,"highlight_end":54},{"text":"            let team_bitboards = chess2::TeamBitboards::new(friendly_king.board_index, &board);","highlight_start":1,"highlight_end":96},{"text":"            let enemy_attacks = move_generator::gen_enemy_attacks(&friendly_king, team_bitboards, &board, &pieces_info);","highlight_start":1,"highlight_end":121},{"text":"            let new_turn_board = move_generator::new_turn(&piece_internal_move.initial_piece_coordinates, piece_internal_move.final_piece_bit, friendly_king, &enemy_king, &enemy_attacks, team_bitboards, board, &pieces_info);","highlight_start":1,"highlight_end":225},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Get what the phsysical bitboard should be after the turn is made","highlight_start":1,"highlight_end":80},{"text":"            let mut new_physical_bitboard = board.to_bitboard();","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            new_physical_bitboard ^= 1 << piece_internal_move.initial_piece_coordinates.bit; // Toggle initial piece bit","highlight_start":1,"highlight_end":121},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if !chess2::bit_on(new_physical_bitboard, piece_internal_move.final_piece_bit) {","highlight_start":1,"highlight_end":93},{"text":"                new_physical_bitboard ^= 1 << piece_internal_move.final_piece_bit; // Toggle the final piece bit if there wasn't a capture","highlight_start":1,"highlight_end":139},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if !player_white {","highlight_start":1,"highlight_end":31},{"text":"                new_physical_bitboard = chess2::flip_bitboard(new_physical_bitboard); // Flip the bitboard to physical board perspective","highlight_start":1,"highlight_end":137},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match new_turn_board {","highlight_start":1,"highlight_end":35},{"text":"                Ok(new_board) => {","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Show computer move","highlight_start":1,"highlight_end":42},{"text":"                    if !players_turn {","highlight_start":1,"highlight_end":39},{"text":"                        show_move(new_physical_bitboard, &piece_physical_move, &mut grid_sr, &hall_sensor, &mut button, &mut cycle_counter, &mut delay)","highlight_start":1,"highlight_end":152},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    board = new_board;","highlight_start":1,"highlight_end":39},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                Err(error) => {","highlight_start":1,"highlight_end":32},{"text":"                    lcd.clear(&mut delay);","highlight_start":1,"highlight_end":43},{"text":"                    lcd.home(&mut delay);","highlight_start":1,"highlight_end":42},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    match error {","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        // When there is a win error break the game loop so a new game can be started","highlight_start":1,"highlight_end":102},{"text":"                        TurnError::Win => {","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Show computer move","highlight_start":1,"highlight_end":50},{"text":"                            if !players_turn {","highlight_start":1,"highlight_end":47},{"text":"                                show_move(new_physical_bitboard, &piece_physical_move, &mut grid_sr, &hall_sensor, &mut button, &mut cycle_counter, &mut delay)","highlight_start":1,"highlight_end":160},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Print the winning team to the lcd","highlight_start":1,"highlight_end":65},{"text":"                            lcd.print(&mut delay, \"Game over\");","highlight_start":1,"highlight_end":64},{"text":"                            lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":64},{"text":"                            lcd_print_team(&mut lcd, &mut delay, board.whites_move);","highlight_start":1,"highlight_end":85},{"text":"                            lcd.print(&mut delay, \" team wins\");","highlight_start":1,"highlight_end":65},{"text":"                            break 'game;","highlight_start":1,"highlight_end":41},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        TurnError::Draw => {","highlight_start":1,"highlight_end":45},{"text":"                            lcd.print(&mut delay, \"Game over (draw)\");","highlight_start":1,"highlight_end":71},{"text":"                            break 'game;","highlight_start":1,"highlight_end":41},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        // When there is an invalid move error make the player revert the turn and try again","highlight_start":1,"highlight_end":109},{"text":"                        TurnError::InvalidMove => {","highlight_start":1,"highlight_end":52},{"text":"                            lcd.print(&mut delay, \"Invalid move\");","highlight_start":1,"highlight_end":67},{"text":"                            lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":64},{"text":"                            lcd.print(&mut delay, \"Please revert\");","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            show_bitboard_move(physical_bitboard, &mut grid_sr, &hall_sensor, &mut button, &mut cycle_counter, &mut delay);","highlight_start":1,"highlight_end":140},{"text":"                            continue;","highlight_start":1,"highlight_end":38},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        TurnError::InvalidMoveCheck => {","highlight_start":1,"highlight_end":57},{"text":"                            lcd.print(&mut delay, \"King in check\");","highlight_start":1,"highlight_end":68},{"text":"                            lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":64},{"text":"                            lcd.print(&mut delay, \"Please revert\");","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            show_bitboard_move(physical_bitboard, &mut grid_sr, &hall_sensor, &mut button, &mut cycle_counter, &mut delay);","highlight_start":1,"highlight_end":140},{"text":"                            continue;","highlight_start":1,"highlight_end":38},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Draw game based on half move clock after the move has taken place","highlight_start":1,"highlight_end":81},{"text":"            // This is so checkmates made this move take priority over the half move draw","highlight_start":1,"highlight_end":90},{"text":"            if board.half_move_clock >= 100 {","highlight_start":1,"highlight_end":46},{"text":"                lcd.clear(&mut delay);","highlight_start":1,"highlight_end":39},{"text":"                lcd.set_cursor(&mut delay, [0, 0]);","highlight_start":1,"highlight_end":52},{"text":"                lcd.print(&mut delay, \"Game over (draw)\");","highlight_start":1,"highlight_end":59},{"text":"                lcd.set_cursor(&mut delay, [0, 1]);","highlight_start":1,"highlight_end":52},{"text":"                lcd.print(&mut delay, \"Fifty move rule\");","highlight_start":1,"highlight_end":58},{"text":"                break 'game;","highlight_start":1,"highlight_end":29},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Once the early and mid phases of the game are done reset the opening heatmap","highlight_start":1,"highlight_end":92},{"text":"            // After this point no heatmap will affect the computer moves","highlight_start":1,"highlight_end":74},{"text":"            if board.half_moves > 20 {","highlight_start":1,"highlight_end":39},{"text":"                opening_heatmap = [[0i16; 64]; 12];","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"labels are used before loops and blocks, allowing e.g., `break 'label` to them","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `:` after the label","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":10413,"byte_end":10413,"line_start":229,"line_end":229,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"        'game loop {","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":": ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: labeled expression must be followed by `:`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:229:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        'game loop {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: add `:` after the label\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe label\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            lcd.clear(&mut delay);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let players_turn = player_white == board.whites_move; // Determine wether the current turn is for the player or computer to make\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: labels are used before loops and blocks, allowing e.g., `break 'label` to them\u001b[0m\n\n"}
{"message":"expected `:`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":10414,"byte_end":10418,"line_start":229,"line_end":229,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        'game loop {","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected `:`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:229:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        'game loop {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\n"}
{"message":"unresolved imports `arrform`, `arrform::ArrForm`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":246,"byte_end":253,"line_start":12,"line_end":12,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use arrform::{arrform, ArrForm};","highlight_start":5,"highlight_end":12}],"label":"use of undeclared crate or module `arrform`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":265,"byte_end":272,"line_start":12,"line_end":12,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"use arrform::{arrform, ArrForm};","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `arrform`, `arrform::ArrForm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse arrform::{arrform, ArrForm};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `arrform`\u001b[0m\n\n"}
{"message":"unused import: `embedded_hal::digital::v2::OutputPin`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":74,"byte_end":110,"line_start":7,"line_end":7,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"use embedded_hal::digital::v2::OutputPin;","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":70,"byte_end":111,"line_start":7,"line_end":7,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use embedded_hal::digital::v2::OutputPin;","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `embedded_hal::digital::v2::OutputPin`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal::digital::v2::OutputPin;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `pac::DCB`, `pac::DWT`, `pac`, `prelude::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":189,"byte_end":192,"line_start":10,"line_end":10,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":11,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":194,"byte_end":202,"line_start":10,"line_end":10,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":204,"byte_end":212,"line_start":10,"line_end":10,"column_start":26,"column_end":34,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":26,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":228,"byte_end":238,"line_start":10,"line_end":10,"column_start":50,"column_end":60,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":50,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":189,"byte_end":214,"line_start":10,"line_end":10,"column_start":11,"column_end":36,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":11,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":226,"byte_end":238,"line_start":10,"line_end":10,"column_start":48,"column_end":60,"is_primary":true,"text":[{"text":"use hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};","highlight_start":48,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `pac::DCB`, `pac::DWT`, `pac`, `prelude::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse hal::{pac, pac::DWT, pac::DCB, delay::Delay, prelude::*};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `rprintln`, `rtt_init_print`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":293,"byte_end":301,"line_start":14,"line_end":14,"column_start":18,"column_end":26,"is_primary":true,"text":[{"text":"use rtt_target::{rprintln, rtt_init_print};","highlight_start":18,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":303,"byte_end":317,"line_start":14,"line_end":14,"column_start":28,"column_end":42,"is_primary":true,"text":[{"text":"use rtt_target::{rprintln, rtt_init_print};","highlight_start":28,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":276,"byte_end":319,"line_start":14,"line_end":14,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use rtt_target::{rprintln, rtt_init_print};","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `rprintln`, `rtt_init_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rtt_target::{rprintln, rtt_init_print};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `chess2::board::board_representation`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":326,"byte_end":361,"line_start":17,"line_end":17,"column_start":5,"column_end":40,"is_primary":true,"text":[{"text":"use chess2::board::board_representation;","highlight_start":5,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":322,"byte_end":362,"line_start":17,"line_end":17,"column_start":1,"column_end":41,"is_primary":true,"text":[{"text":"use chess2::board::board_representation;","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `chess2::board::board_representation`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chess2::board::board_representation;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `chess2::algorithm`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":367,"byte_end":384,"line_start":18,"line_end":18,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use chess2::algorithm;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":363,"byte_end":385,"line_start":18,"line_end":18,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"use chess2::algorithm;","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `chess2::algorithm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chess2::algorithm;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0432`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0432`.\u001b[0m\n"}
